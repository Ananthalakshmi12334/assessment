# -*- coding: utf-8 -*-
"""LVADSUSR69_Ananthalakshmi_lab1(i2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pmoQVo0YwOkiD4f5cdg4dOO51hz4VDn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import mean_absolute_error

import pandas as pd
data = pd.read_csv('/content/winequality-red.csv')
data.head()

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler

# a
print(data.isnull().sum())
imputer = SimpleImputer(strategy='mean')
data[['fixed acidity', 'residual sugar', 'pH' , 'volatile acidity' , 'citric acid' , 'sulphates','chlorides','free sulfur dioxide' ]] = imputer.fit_transform(data[['fixed acidity', 'residual sugar', 'pH', 'volatile acidity' , 'citric acid' , 'sulphates','chlorides','free sulfur dioxide']])

# Outlier Handling
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1
outliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))
data[outliers] = np.where(data[outliers] < (Q1 - 1.5 * IQR), Q1 - 1.5 * IQR, Q3 + 1.5 * IQR)
final_df=cap_data(df)
sns.boxplot(final_df)
# b
def label_quality(x):
    if x <= 6 and x >= 3:
        return 'bad'
    else:
        return 'good'
data['quality'] = data['quality'].apply(label_quality)

# c
label_encoder = LabelEncoder()
data['quality'] = label_encoder.fit_transform(data['quality'])

# d
features = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides',
            'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']
target = 'quality'

# e
X_train, X_test, y_train, y_test = train_test_split(data[features], data[target], test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#
k_values = [3, 5, 7, 9]
for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_scaled, y_train)
    y_pred = knn.predict(X_test_scaled)

    # g
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)

    print(f'KNN with K={k}:')
    print(f'Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}')